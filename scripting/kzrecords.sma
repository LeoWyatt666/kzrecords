/* Plugin generated by AMXX-Studio */

/* Ty everest, gladius, Krolik */

#include < amxmodx >
#include < sockets >
#include < cstrike >
#include < hamsandwich >
#include < fakemeta >
#include < engine >
#include < colorchat >



#define PLUGIN "KZ Records"
#define VERSION "0.2"
#define AUTHOR "Jeronimo."

#pragma semicolon 1

/******************************************* VARS *************************************************/

new g_szMapName[32];
new Buffer[25001];
new bool:g_bShowRecordEnd = true;
new g_UpdatedNR = 1;

new g_szDir[128];
new const g_szDirFile[] = "kzrecords";
new const g_szCommFile[] = "community.ini";

new g_szCommDef[][][] =  {
	{ "xj", "Xtreme-Jumps", "http://xtreme-jumps.eu/demos.txt"},
	{ "cc", "Cosy-Climbing", "http://cosy-climbing.net/demos.txt"}
};

enum _:COMM {
	ID,
	NAME,
	URL,
	UPDATED,
	DEMOS
};
new g_szComm[32][COMM][256];

enum _:CVAR {
	BOTS,
	END,
	PREFIX,
	TEAM
};
new g_cvar[CVAR];

enum _:REC {
	MAPP,
	TIME,
	JUMPER,
	COUNTRY,
	EXT
};

/******************************************* BODY *************************************************/

// Init
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	// Client cmd
	register_clcmd("say", "CmdSayCheck");
	register_clcmd("say_team", "CmdSayCheck");
	//register_clcmd("say /kzrecords_update", "UpdateRecords", ADMIN_RCON);
	
	// Finish button
	RegisterHam(Ham_Use, "func_button", "hamUse");
	
	// Cvars
	g_cvar[BOTS]	= register_cvar("kzr_bots", "wr ru", ADMIN_RCON);
	g_cvar[END] 	= register_cvar("kzr_end", "1", ADMIN_RCON);
	g_cvar[PREFIX] 	= register_cvar("kzr_prefix", "[K-lan]", ADMIN_RCON);
	
	// 0 = CS_TEAM_UNASSIGNED, 1 = CS_TEAM_T, 2 = CS_TEAM_CT, 3 = CS_TEAM_SPECTATOR
	g_cvar[TEAM] 	= register_cvar("kzr_bot_team", "1", ADMIN_RCON);
	
	// Mapname
	get_mapname(g_szMapName, 31);
	strtolower(g_szMapName);
	
	// Read data comm from File;
	ReadCommunity();
	
	// Demos Files
	for( new i; i < sizeof(g_szComm[]); i++ ) {
		format(g_szComm[i][DEMOS], charsmax(g_szComm[][]),"%s/demos_%s.txt", g_szDir, g_szComm[i][ID]);
	}
	
	// BOTS
	new cvar[32];
	get_pcvar_string(g_cvar[BOTS], cvar, charsmax(cvar));
	if(cvar[0]) {
		new CommId[4][5];
		new count = ExplodeString(CommId, 4, 5, cvar, ' ');
	
		for(new i; i < count; i++) {
			new botname[128], szOutMsg[192];
			
			if(equal(CommId[i], "wr"))
				CommId[i] = "xj";
				
			new iFound = ReadDemos(GetCommNum(CommId[i]), g_szMapName, szOutMsg, false, true);
			if(equal(CommId[i], "xj") && !iFound) {
				CommId[i] = "cc";
				ReadDemos(GetCommNum(CommId[i]), g_szMapName, szOutMsg, false, true);
			}
			
			format(botname, charsmax(botname), "[%s] %s", CommId[i], szOutMsg);
			CreateBot(botname);
		}
	}
	
	// Update
	/*	
	format(LastUpdate, 127, "%s/demos_last_update.ini", g_szDir);
	
	if( !filexists( LastUpdate ) ) {
		
		UpdateRecords( );
		
		return;
	}
	
	new iYear, iMonth, iDay, szDate[ 11 ];
	date( iYear, iMonth, iDay );
	
	new iFile = fopen( LastUpdate, "rt" );
	fgets( iFile, szDate, 10 );
	fclose( iFile );
	
	if( iYear > str_to_num( szDate[ 0 ] ) || iMonth > str_to_num( szDate[ 5 ] ) || iDay > str_to_num( szDate[ 8 ] ) )
	UpdateRecords();
	*/
		
}

// Read data comm from File;
public ReadCommunity() {
	get_localinfo("amxx_datadir", g_szDir, charsmax(g_szDir));
	format(g_szDir, charsmax(g_szDir),"%s/%s", g_szDir, g_szDirFile);
	
	if(!dir_exists(g_szDir))
		mkdir(g_szDir);
		
	new szFile[128];
	format(szFile, charsmax(szFile) , "%s/%s", g_szDir, g_szCommFile);
	
	if(!file_exists(szFile))  {
		new hFile = fopen(szFile, "wt");
		fputs(hFile, "; Format: ^"Id (say command)^" ^"Name^" ^"Demos URL; and more...^"^n^n");
		
		for( new i; i < charsmax(g_szCommDef[]); i++ ) {
			new text[128];
			format(text,127,"^"%s^" ^"%s^" ^"%s^"^n", g_szCommDef[i][0], g_szCommDef[i][1], g_szCommDef[i][2]);
			fputs(hFile, text);
		}
		fclose(hFile);	
	}
	
	new hFile = fopen(szFile, "r");
	new szData[512];
	new i;
	while(!feof(hFile))  {
		fgets(hFile, szData, charsmax(szData));
		trim(szData);
				
		if(!szData[0] || szData[0] == '^n' || szData[0] == ';')  {
			continue;
		}
		
		ExplodeString(g_szComm[i], sizeof(g_szComm), charsmax(g_szComm[][]), szData, ',');
		i++;
	}
	fclose(hFile);
}

// Check say cmds
public CmdSayCheck() {
	new szInMsg[64];
	read_args(szInMsg, charsmax(szInMsg));
	strtolower(szInMsg);
	remove_quotes(szInMsg);
	trim(szInMsg);
	
	if(szInMsg[0] != '/')
		return PLUGIN_HANDLED;
		
	if(szInMsg[0])
		CmdSay(0, szInMsg);
		
	return PLUGIN_HANDLED;
}

// function Say
public CmdSay(id, szInMsg[64]) {
	new CommId[5], WhatMap[32];
	
	replace(szInMsg, charsmax(szInMsg), "/", "");
	parse(szInMsg, CommId, charsmax(CommId), WhatMap, charsmax(WhatMap));

	if(equal(CommId, "wr"))
		CommId = "xj";
		
	new num = GetCommNum(CommId);
	
	if(!WhatMap[0])
		WhatMap = g_szMapName;
	
	new szOutMsg[192];
	new iFound = ReadDemos(num, WhatMap, szOutMsg);
	
	if(equal(CommId, "xj") && !iFound) {
		CommId = "cc";
		num = GetCommNum(CommId);
		ReadDemos(num, WhatMap, szOutMsg);
	}
	
	if(num < 0)
		return PLUGIN_HANDLED;
		
	new prefix[16];
	get_pcvar_string(g_cvar[PREFIX], prefix, charsmax(prefix));
	
	new text[256];
	format(text, charsmax(text), "^x04%s^x03 %s record on ^x04%s^x03: %s", prefix, g_szComm[num][NAME], WhatMap[0], szOutMsg);
	ColorChat(id, GREY,"^x03%s", text);
	
	return PLUGIN_CONTINUE;
}

// Create message
stock ReadDemos(num, WhatMap[32], szOutMsg[192], bool:color = true, bool:one = false) {
	if(num<0)
		return 0;
	
	new DataRec[6][REC][64];
	new iFound = GetRecordData(WhatMap, DataRec, g_szComm[num][DEMOS]);
	
	format(szOutMsg, charsmax(szOutMsg), "No record");
	for(new i; i < iFound; i++) {
		if( !DataRec[i][JUMPER][0] )
			break;
		
		if(DataRec[i][EXT][0] && !one) {
			new szOutAdd[32];
			
			if(DataRec[i][TIME][0] == '*')
				format(szOutAdd, charsmax(szOutAdd), " ^x04[%s] ^x03 No record;", DataRec[i][EXT]);
			else
				format(szOutAdd, charsmax(szOutAdd), " ^x04[%s] %s^x03 by^x04 %s %s;", 
				DataRec[i][EXT], DataRec[i][TIME], DataRec[i][JUMPER], DataRec[i][COUNTRY]);
				
			add(szOutMsg, charsmax(szOutMsg), szOutAdd);
		}
		else {
			if(DataRec[i][TIME][0] == '*')
				format(szOutMsg, charsmax(szOutMsg), "No record");
				
			else
				format(szOutMsg, charsmax(szOutMsg), "^x04%s^x03 by^x04 %s %s", 
				DataRec[i][TIME], DataRec[i][JUMPER], DataRec[i][COUNTRY]);
		}	
	}
	
	if(!color) {
		replace_all(szOutMsg, charsmax(szOutMsg), "^x04", "");
		replace_all(szOutMsg, charsmax(szOutMsg), "^x03", "");
	}
	
	return iFound;
}

// Get data from file
stock GetRecordData(const Map[32], DataRec[6][REC][64], RecFile[256]) {
	new i = 0, szData[64], iMapLen = strlen(Map);
	
	new iFile = fopen(RecFile, "rt");
	
	if(!iFile)
		return 0;
		
	while(!feof(iFile)) {
		fgets(iFile, szData, charsmax(szData));
		trim(szData);
		
		if(!szData[0] || !equali(szData, Map, iMapLen))
			continue;
		
		ExplodeString(DataRec[i], sizeof(DataRec[]), charsmax(DataRec[][]), szData, ' ');
		
		if(DataRec[i][TIME][2] != ':')
			ClimbtimeToString(str_to_float(DataRec[i][TIME]), DataRec[i][TIME], 8);

		if(DataRec[i][MAPP][iMapLen] == '[')
			copyc(DataRec[i][EXT], 8, DataRec[i][MAPP][iMapLen+1], ']');
		
		i++;
	}
	
	fclose(iFile);
	
	return i;
}

// Get Num By ID (say command)
stock GetCommNum(CommId[]) {	
	for( new i; i < sizeof(g_szComm[]); i++ ) {
		if(equal(g_szComm[i][ID], CommId) && g_szComm[i][ID][0]) {
			return i;
		}
	}
	return -1;
}

// Convert Time
stock ClimbtimeToString(const Float:flClimbTime, szOutPut[], const iLen) {
	if(!flClimbTime) {
		copy(szOutPut, iLen, "**:**.**");
		return;
	}
	
	new iMinutes = floatround(flClimbTime / 60.0, floatround_floor);
	new iSeconds = floatround(flClimbTime - iMinutes * 60, floatround_floor);
	new iMiliSeconds = floatround((flClimbTime - (iMinutes * 60 + iSeconds) ) * 100, floatround_floor);
	
	formatex(szOutPut, iLen, "%02i:%02i.%02i", iMinutes, iSeconds, iMiliSeconds);
}


/********************************************* UPDATE *********************************************/

// Read from site
public ReadWeb(const iSocket) {
	new RecFile[256];
	for( new i; i < charsmax(g_szComm[]); i++ ) {
		if ( g_UpdatedNR == i )
			RecFile = g_szComm[i][DEMOS];
	}

	g_UpdatedNR++;
	
	while (socket_recv( iSocket, Buffer, 25000 )) {
		if( Buffer[ 0 ] ) {
			if( Buffer[ 0 ] == 'H' && Buffer[ 1 ] == 'T' ) { // Header
				new iPos;
				iPos  = contain( Buffer, "^r^n^r^n" )   + 4;
				iPos += contain( Buffer[ iPos ], "^n" ) + 1;
				
				formatex( Buffer, charsmax( Buffer ), Buffer[ iPos ] );
			}
			
			new iFile = fopen( RecFile, "at" );
			fputs( iFile, Buffer );
			fclose( iFile );		
		}
	}
	
	Buffer[ 0 ] = 0; // Clean the memory.
	socket_close(iSocket);
}

// Update function
public UpdateRecords( ) {
	for( new i; i < charsmax(g_szComm[]); i++ ) {
		if (file_exists(g_szComm[i][DEMOS]))
			delete_file(g_szComm[i][DEMOS]);
	}
	
	new iYear, iMonth, iDay, szTemp[ 11 ];
	date( iYear, iMonth, iDay );
	
	new LastUpdate[64];
	new iFile = fopen( LastUpdate, "wt" );
	formatex( szTemp, 10, "%04ix%02ix%02i", iYear, iMonth, iDay );
	fputs( iFile, szTemp );
	fclose( iFile );
	
	new Host[ 96 ], Url[ 96 ], Socket[ 256 ], iPos, iSocket;
	
	for( new i; i < charsmax(g_szComm[]); i++ ) {
		copy( Host, 95,  g_szComm[i][URL] );
		iPos = contain( Host, "/" );
		
		if( iPos != -1 ) {
			copy( Url, 95, Host[ iPos + 1 ] );
			Host[ iPos ] = 0;
		}
		
		iSocket = socket_open( Host, 80, SOCKET_TCP, iPos );
		
		if( iPos > 0 )
			continue;
		
		formatex( Socket, 255, "GET /%s HTTP/1.1^nHost: %s^r^n^r^n", Url, Host );
		
		socket_send( iSocket, Socket, 255 );
		
		set_task( 0.25, "ReadWeb", iSocket );
	}	
}

/********************************************* FINISH *********************************************/

// Use func
public hamUse(ent, id) {
	if(!get_pcvar_num(g_cvar[END]))
		return HAM_IGNORED;
	
	if(!(1 <= id <= get_maxplayers()))
		return HAM_IGNORED;
	
	new szTarget[32];
	pev(ent, pev_target, szTarget, 31);
	
	if((equal(szTarget, "counter_off") || 
	equal(szTarget, "clockstopbutton") || 
	equal(szTarget, "clockstop") || 	
	equal(szTarget, "stop_counter") || 
	equal(szTarget, "multi_stop"))) {
		if (g_bShowRecordEnd) {
			CmdSay(id, "/wr");
			g_bShowRecordEnd = false;
			set_task(10.0, "enablrecord", 500);
		}
	}
	
	return HAM_IGNORED;
}

// Time task
public enablrecord() {
	g_bShowRecordEnd = true;
}

/********************************************* BOTS ***********************************************/

// Create FakeBot
public CreateBot(botname[]) {
	new id = engfunc(EngFunc_CreateFakeClient, botname);
	
	if(pev_valid(id)) {	
		//Supposed to prevent crashes?
		dllfunc(MetaFunc_CallGameEntity, "player", id);
		set_pev(id, pev_flags, FL_FAKECLIENT);

		//Make Sure they have no model
		set_pev(id, pev_model, "");
		set_pev(id, pev_viewmodel2, "");
		set_pev(id, pev_modelindex, 0);

		//Make them invisible for good measure
		set_pev(id, pev_renderfx, kRenderFxNone);
		set_pev(id, pev_rendermode, kRenderTransAlpha);
		set_pev(id, pev_renderamt, 0.0);
		
		new team = get_pcvar_num(g_cvar[TEAM]);
		if(0 <= team <= 3) cs_set_user_team(id, team);
	}
}

/********************************************* FUNC ***********************************************/

stock ExplodeString( szOutput[][], nMax, nSize, szInput[], szDelimiter ) {
	new i = 0, nLen = 0, l = strlen(szInput);
	do {
		trim(szInput[nLen]);
		nLen += (1 + copyc( szOutput[i], nSize, szInput[nLen], szDelimiter ));
	} while ((nLen < l) && (++i < nMax));
	return i;
}

/********************************************* END ************************************************/
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1049\\ f0\\ fs16 \n\\ par }
*/

/* Plugin generated by AMXX-Studio */

/* Thank you:
	everest,
	gladius,
	Krolik,
	PomanoB
	Garey
	kraster
*/

#include <amxmodx>
#include <hamsandwich>
#include <fakemeta_util>
#include <colorchat>
#include <sqlx>

#define PLUGIN "KZ Records"
#define VERSION "0.5"
#define AUTHOR "Jeronimo."

#pragma semicolon 1

/******************************************* VARS *************************************************/

new g_szMapName[32];
new bool:g_bShowRecordEnd = true;

new const g_szCfgFile[] = "kzrecords_sql.cfg";

enum _:COMM {
	ID,
	NAME,
	URL,
	UPDATED,
	INFO,
	DEMOS
};
new g_szComm[32][COMM][256];

enum _:CVAR {
	BOTS,
	END,
	PREFIX,
	TEAM,
	SQL,
	SQL_HOST,
	SQL_DB,
	SQL_USER,
	SQL_PASS
};
new g_cvar[CVAR];

enum _:REC {
	MAPP,
	TIME,
	JUMPER,
	COUNTRY,
	MAP,
	EXT
};

new Handle:SQL_Tuple;
new Handle:SQL_Connection;

new g_iMaxPlayers;

/******************************************* BODY *************************************************/

// Init
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);

	// Client cmd
	register_clcmd("say", "CmdSayCheck");
	register_clcmd("say_team", "CmdSayCheck");

	// Finish button
	RegisterHam(Ham_Use, "func_button", "hamUse");

	// Cvars
	g_cvar[PREFIX] 	= register_cvar("kzr_prefix", "[kzr]", ADMIN_RCON);
	g_cvar[END] 	= register_cvar("kzr_end", "1", ADMIN_RCON);

	g_cvar[BOTS]	= register_cvar("kzr_bots", "wr", ADMIN_RCON);
	// 0 = CS_TEAM_UNASSIGNED, 1 = CS_TEAM_T, 2 = CS_TEAM_CT, 3 = CS_TEAM_SPECTATOR
	g_cvar[TEAM] 	= register_cvar("kzr_bot_team", "1", ADMIN_RCON);

	g_cvar[SQL_HOST] = register_cvar("kzr_sql_host", "127.0.0.1", ADMIN_RCON);
	g_cvar[SQL_DB] 	 = register_cvar("kzr_sql_db", "lonis", ADMIN_RCON);
	g_cvar[SQL_USER] = register_cvar("kzr_sql_user", "lonis", ADMIN_RCON);
	g_cvar[SQL_PASS] = register_cvar("kzr_sql_pass", "lonis", ADMIN_RCON);

	g_iMaxPlayers = get_maxplayers();
}

public plugin_cfg() {
	new szCfgPath[96];
	get_localinfo("amxx_configsdir", szCfgPath, charsmax(szCfgPath));
	format(szCfgPath, charsmax(szCfgPath), "%s/%s", szCfgPath, g_szCfgFile);

	if(file_exists(szCfgPath)) {
		server_cmd("exec %s", szCfgPath);
		server_exec();
	}

	new host[33],dbase[33],user[33],pass[33];
	get_cvar_string("kzr_sql_host",host,30);
	get_cvar_string("kzr_sql_db",dbase,30);
	get_cvar_string("kzr_sql_user",user,30);
	get_cvar_string("kzr_sql_pass",pass,30);
	SQL_Tuple = SQL_MakeDbTuple(host,user,pass,dbase);
	new err, error[256];
	SQL_Connection = SQL_Connect(SQL_Tuple, err, error, charsmax(error));

	if(SQL_Connection == Empty_Handle) {
		log_amx("[SQLx sql error] %s ",error);
	}

	// Mapname
	get_mapname(g_szMapName, 31);
	strtolower(g_szMapName);

	// Read data comm from File;
	ReadCommunity();

	// BOTS
	CreateBots();
}

public plugin_end(){
	SQL_FreeHandle(SQL_Connection);
}

/********************************************* COMM ***********************************************/

public ReadCommunity() {
	new Handle:query = SQL_PrepareQuery(SQL_Connection, "SELECT `name`, `fullname`, `url`  FROM `kz_comm` ORDER BY sort");

	SQL_Execute (query);

	if(!SQL_AffectedRows(query))
		return 0;

	
	new num = 0;
	while(SQL_MoreResults(query)) {
		new name[32];
		SQL_ReadResult(query, 0, name, 31);
		new fullname[32];
		SQL_ReadResult(query, 1, fullname, 31);
		new url[32];
		SQL_ReadResult(query, 2, url, 31);

		new szData[512];
		format(szData, charsmax(szData), "%s, %s, %s", name, fullname, url);

		ExplodeString(g_szComm[num], sizeof(g_szComm), charsmax(g_szComm[][]), szData, ',');
		num++;

		SQL_NextRow(query);
	}

	return 1;
}

// Get Num By ID (say command)
stock GetCommNum(CommId[]) {
	for( new i; i < sizeof(g_szComm[]); i++ ) {
		if(equal(g_szComm[i][ID], CommId) && g_szComm[i][ID][0]) {
			return i;
		}
	}
	return -1;
}

/********************************************* SAYS ***********************************************/

// Check say cmds
public CmdSayCheck() {
	new szInMsg[64];
	read_args(szInMsg, charsmax(szInMsg));
	strtolower(szInMsg);
	remove_quotes(szInMsg);
	trim(szInMsg);

	if(szInMsg[0] != '/')
		return PLUGIN_HANDLED;

	if(szInMsg[0])
		CmdSay(0, szInMsg);

	return PLUGIN_HANDLED;
}

// function Say
public CmdSay(id, szInMsg[64]) {
	new CommId[5], WhatMap[32], CommName[256];

	replace(szInMsg, charsmax(szInMsg), "/", "");
	parse(szInMsg, CommId, charsmax(CommId), WhatMap, charsmax(WhatMap));

	if(!CommId[0])
		return PLUGIN_CONTINUE;

	if(equal(CommId, "wr")) {
		CommId = "xj";
		CommName = "World";
	}

	new num = GetCommNum(CommId);

	if(num < 0)
		return PLUGIN_CONTINUE;

	if(!equal(CommName, "World"))
		copy(CommName, charsmax(CommName), g_szComm[num][NAME]);

	if(!WhatMap[0])
		WhatMap = g_szMapName;

	new szOutMsg[192];
	new iFound = ReadDemos(num, WhatMap, szOutMsg);
	if(equal(CommId, "xj") && !iFound) {
		ReadDemos(GetCommNum("cc"), WhatMap, szOutMsg);
	}

	new prefix[16];
	get_pcvar_string(g_cvar[PREFIX], prefix, charsmax(prefix));

	new text[256];
	format(text, charsmax(text), "^x04%s ^x01%s^x03 record on ^x04%s^x03: %s", prefix, CommName, WhatMap[0], szOutMsg);
	ColorChat(id, GREY,"^x03%s", text);

	return PLUGIN_CONTINUE;
}

/********************************************* DEMOS **********************************************/

// Create message
stock ReadDemos(num, WhatMap[32], szOutMsg[192], bool:color = true, bool:one = false) {
	if(num < 0)
		return 0;

	new DataRec[6][REC][64];

	new iFound = GetRecordData(WhatMap, DataRec, g_szComm[num][ID]);

	format(szOutMsg, charsmax(szOutMsg), "No record");
	for(new i; i < iFound; i++) {
		if(!DataRec[i][JUMPER][0])
			break;

		if(DataRec[i][TIME][2] != ':')
				ClimbtimeToString(str_to_float(DataRec[i][TIME]), DataRec[i][TIME], 8);

		if(DataRec[i][EXT][0] && !one) {
			new szOutAdd[32];

			if(DataRec[i][TIME][0] == '*')
				format(szOutAdd, charsmax(szOutAdd), " ^x04[%s] ^x03 No record;", DataRec[i][EXT]);
			else
				format(szOutAdd, charsmax(szOutAdd), " ^x04[%s] %s^x01 by^x04 %s %s;",
				DataRec[i][EXT], DataRec[i][TIME], DataRec[i][JUMPER], DataRec[i][COUNTRY]);

			add(szOutMsg, charsmax(szOutMsg), szOutAdd);
		}
		else {
			if(DataRec[i][TIME][0] == '*')
				format(szOutMsg, charsmax(szOutMsg), "No record");

			else
				format(szOutMsg, charsmax(szOutMsg), "^x01%s^x03 by^x04 %s %s",
				DataRec[i][TIME], DataRec[i][JUMPER], DataRec[i][COUNTRY]);
		}
	}

	if(!color) {
		replace_all(szOutMsg, charsmax(szOutMsg), "^x01", "");
		replace_all(szOutMsg, charsmax(szOutMsg), "^x03", "");
		replace_all(szOutMsg, charsmax(szOutMsg), "^x04", "");
	}

	return iFound;
}

stock GetRecordData(const Map[32], DataRec[6][REC][64], comm_id[256]) {
	new Handle:query = SQL_PrepareQuery(SQL_Connection, "SELECT `time`, `player`, `country`  FROM `kz_records` WHERE map='%s' AND comm='%s'", Map, comm_id);

	SQL_Execute (query);

	new rows = SQL_AffectedRows(query);
	if(rows) {
		new Time[32];
		SQL_ReadResult(query, 0, Time, 31);
		new Player[32];
		SQL_ReadResult(query, 1, Player, 31);
		new Country[32];
		SQL_ReadResult(query, 2, Country, 31);

		new szData[64];
		format(szData, charsmax(szData), "%s %s %s %s", Map, Time, Player, Country);

		new szDataRec[REC][64];
		ExplodeString(szDataRec, sizeof(szDataRec), charsmax(szDataRec[]), szData, ' ');

		DataRec[0] = szDataRec;
	}

	return rows;
}

/********************************************* FINISH *********************************************/

// Use func (bind key +use)
public hamUse(ent, id) {
	if(!get_pcvar_num(g_cvar[END]))
		return HAM_IGNORED;

	if(!(1 <= id <= get_maxplayers()))
		return HAM_IGNORED;

	new szTarget[32];
	pev(ent, pev_target, szTarget, 31);

	if((equal(szTarget, "counter_off") ||
	equal(szTarget, "clockstopbutton") ||
	equal(szTarget, "clockstop") ||
	equal(szTarget, "stop_counter") ||
	equal(szTarget, "multi_stop"))) {
		if (g_bShowRecordEnd) {
			CmdSay(id, "/wr");
			g_bShowRecordEnd = false;
			set_task(10.0, "enablrecord", 500);
		}
	}

	return HAM_IGNORED;
}

// Time task
public enablrecord() {
	g_bShowRecordEnd = true;
}

/********************************************* BOTS ***********************************************/

// BOTS
public CreateBots() {
	new cvar[32];
	get_pcvar_string(g_cvar[BOTS], cvar, charsmax(cvar));
	if(cvar[0]) {
		new CommId[8][8];
		new count = ExplodeString(CommId, 8, 8, cvar, ' ');

		for(new i; i <= count; i++) {
			new botname[64], szOutMsg[192];

			if(equal(CommId[i], "wr"))
				CommId[i] = "xj";

			new iFound = ReadDemos(GetCommNum(CommId[i]), g_szMapName, szOutMsg, false, true);
			if(equal(CommId[i], "xj") && !iFound) {
				CommId[i] = "cc";
				iFound = ReadDemos(GetCommNum(CommId[i]), g_szMapName, szOutMsg, false, true);
			}


			if(iFound) {
				format(botname, charsmax(botname), "[%s] %s", CommId[i], szOutMsg);
				CreateBot(botname);
			}
		}
	}
}

// Create FakeBot
public CreateBot(botname[]) {
	new id = engfunc(EngFunc_CreateFakeClient, botname);

	if(pev_valid(id)) {
		//Supposed to prevent crashes?
		dllfunc(MetaFunc_CallGameEntity, "player", id);
		set_pev(id, pev_flags, FL_FAKECLIENT);

		//Make Sure they have no model
		set_pev(id, pev_model, "");
		set_pev(id, pev_viewmodel2, "");
		set_pev(id, pev_modelindex, 0);

		//Make them invisible for good measure
		set_pev(id, pev_renderfx, kRenderFxNone);
		set_pev(id, pev_rendermode, kRenderTransAlpha);
		set_pev(id, pev_renderamt, 0.0);

		new team = get_pcvar_num(g_cvar[TEAM]);
		if(0 <= team <= 3) fm_cs_set_user_team(id, team);
		fm_set_user_godmode( id, 1 );
	}
}

/********************************************* FUNC ***********************************************/

// Explode
stock ExplodeString( szOutput[][], nMax, nSize, szInput[], szDelimiter ) {
	new i = 0, nLen = 0, l = strlen(szInput);
	do {
		trim(szInput[nLen]);
		nLen += (1 + copyc( szOutput[i], nSize, szInput[nLen], szDelimiter ));
	} while ((nLen < l) && (++i <= nMax));
	return i+1;
}

// Convert Time
stock ClimbtimeToString(const Float:flClimbTime, szOutPut[], const iLen) {
	if(!flClimbTime) {
		copy(szOutPut, iLen, "**:**.**");
		return;
	}

	new iMinutes = floatround(flClimbTime / 60.0, floatround_floor);
	new iSeconds = floatround(flClimbTime - iMinutes * 60, floatround_floor);
	new iMiliSeconds = floatround((flClimbTime - (iMinutes * 60 + iSeconds) ) * 100, floatround_floor);

	formatex(szOutPut, iLen, "%02i:%02i.%02i", iMinutes, iSeconds, iMiliSeconds);
}

#define PEV_PDATA_SAFE    2
#define OFFSET_TEAM            114
#define OFFSET_DEFUSE_PLANT    193
#define HAS_DEFUSE_KIT        (1<<16)
#define OFFSET_INTERNALMODEL    126

fm_cs_set_user_team(id, team)
{
    if(!(1 <= id <= g_iMaxPlayers) || pev_valid(id) != PEV_PDATA_SAFE)
    {
        return 0;
    }

    switch(team)
    {
        case 1:
        {
            new iDefuser = get_pdata_int(id, OFFSET_DEFUSE_PLANT);
            if(iDefuser & HAS_DEFUSE_KIT)
            {
                iDefuser -= HAS_DEFUSE_KIT;
                set_pdata_int(id, OFFSET_DEFUSE_PLANT, iDefuser);
            }
            set_pdata_int(id, OFFSET_TEAM, 1);
        //    set_pdata_int(id, OFFSET_INTERNALMODEL, 4);
        }
        case 2:
        {
            if(pev(id, pev_weapons) & (1<<CSW_C4))
            {
                engclient_cmd(id, "drop", "weapon_c4");
            }
            set_pdata_int(id, OFFSET_TEAM, 2);
        //    set_pdata_int(id, OFFSET_INTERNALMODEL, 6);
        }
    }

    dllfunc(DLLFunc_ClientUserInfoChanged, id, engfunc(EngFunc_GetInfoKeyBuffer, id));

    return 1;
}


/********************************************* END ************************************************/
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1049\\ f0\\ fs16 \n\\ par }
*/
